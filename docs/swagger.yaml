definitions:
  dtos.CalendarResponse:
    properties:
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      program_name:
        type: string
      start_date:
        type: string
      title:
        type: string
    type: object
  dtos.ConfigReponse:
    properties:
      config_name:
        type: string
      program_id:
        type: integer
      value:
        type: string
    type: object
  dtos.CreateCalendarRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      program_id:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  dtos.CreateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      program_id:
        type: integer
      prefix:
        type: string
    type: object
  dtos.CreateMajorRequest:
    properties:
      program_name:
        type: string
    required:
    - program_name
    type: object
  dtos.EmployeeResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      program_id:
        type: integer
      prefix:
        type: string
    type: object
  dtos.ProjectConfigResponse:
    properties:
      id:
        type: integer
      is_active:
        type: boolean
      program_id:
        type: integer
      title:
        type: string
    type: object
  dtos.ProjectConfigUpsertRequest:
    properties:
      id:
        type: integer
      is_active:
        type: boolean
      program_id:
        type: integer
      title:
        type: string
    type: object
  dtos.UpdateCalendarRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      program_id:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  dtos.UpdateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      program_id:
        type: integer
      prefix:
        type: string
    type: object
  models.Course:
    properties:
      course_name:
        type: string
      course_no:
        type: string
      id:
        type: integer
      program:
        $ref: '#/definitions/models.Program'
      program_id:
        type: integer
    type: object
  models.Employee:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      program:
        $ref: '#/definitions/models.Program'
      program_id:
        type: integer
      prefix:
        type: string
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
    type: object
  models.Program:
    properties:
      id:
        type: integer
      program_name:
        type: string
    type: object
  models.PDF:
    properties:
      id:
        type: integer
      pages:
        items:
          $ref: '#/definitions/models.PDFPage'
        type: array
      resource_id:
        type: integer
    type: object
  models.PDFPage:
    properties:
      content:
        type: string
      id:
        type: integer
      page_number:
        type: integer
      pdf_id:
        description: Foreign key
        type: integer
    type: object
  models.Project:
    properties:
      abstract_text:
        type: string
      academic_year:
        type: integer
      course:
        $ref: '#/definitions/models.Course'
      course_id:
        type: integer
      created_at:
        type: string
      employees:
        items:
          $ref: '#/definitions/models.Employee'
        type: array
      id:
        type: integer
      is_approved:
        type: boolean
      program:
        $ref: '#/definitions/models.Program'
      program_id:
        type: integer
      members:
        items:
          $ref: '#/definitions/models.Student'
        type: array
      project_no:
        type: string
      project_resources:
        items:
          $ref: '#/definitions/models.ProjectResource'
        type: array
      section_id:
        type: string
      semester:
        type: integer
      title_en:
        type: string
      title_th:
        type: string
    type: object
  models.ProjectResource:
    properties:
      id:
        type: integer
      resource:
        $ref: '#/definitions/models.Resource'
    type: object
  models.Resource:
    properties:
      created_at:
        type: string
      id:
        type: integer
      path:
        type: string
      pdf:
        $ref: '#/definitions/models.PDF'
      resource_name:
        type: string
      resource_type:
        $ref: '#/definitions/models.ResourceType'
      resource_type_id:
        type: integer
      title:
        type: string
    type: object
  models.ResourceType:
    properties:
      id:
        type: integer
      mime_type:
        type: string
    type: object
  models.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  models.Student:
    properties:
      email:
        description: Unique email address
        type: string
      first_name:
        description: First name of the student
        type: string
      id:
        description: Use `ID` as the primary key
        type: string
      last_name:
        description: Last name of the student
        type: string
      program:
        allOf:
        - $ref: '#/definitions/models.Program'
        description: Program related to student
      program_id:
        description: Program ID, not null
        type: integer
      prefix:
        description: Optional field for title (e.g., Mr., Ms., etc.)
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /calendar:
    post:
      consumes:
      - application/json
      description: Creates a new calendarof that program
      parameters:
      - description: Calendar Data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateCalendarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created calendar
          schema:
            $ref: '#/definitions/dtos.CalendarResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new Calendar
      tags:
      - Calendar
    put:
      consumes:
      - application/json
      description: Updates an event by its ID with the provided data
      parameters:
      - description: Updated Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateCalendarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated event
          schema:
            $ref: '#/definitions/dtos.CalendarResponse'
        "400":
          description: Invalid event ID or request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing event
      tags:
      - Calendar
  /calendar/{id}:
    delete:
      description: Deletes the specified event using its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid event ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete an event by ID
      tags:
      - Calendar
  /calendar/GetByMajorID/{program_id}:
    get:
      description: Fetches all calendar events for a given program
      parameters:
      - description: Program ID
        in: path
        name: program_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved calendar events
          schema:
            items:
              $ref: '#/definitions/dtos.CalendarResponse'
            type: array
        "400":
          description: Invalid program ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Calendar events not found
          schema:
            additionalProperties: true
            type: object
      summary: Get calendar by program ID
      tags:
      - Calendar
  /config/GetByMajorId/{program_id}:
    get:
      description: Fetches all config for a given program
      parameters:
      - description: Program ID
        in: path
        name: program_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched config
          schema:
            items:
              $ref: '#/definitions/dtos.ConfigReponse'
            type: array
        "400":
          description: Invalid program ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Program not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get config by program ID
      tags:
      - Config
  /employee:
    post:
      consumes:
      - application/json
      description: Creates a new employee
      parameters:
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created employee
          schema:
            $ref: '#/definitions/dtos.EmployeeResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new employee
      tags:
      - Employee
    put:
      consumes:
      - application/json
      description: Updates an employee by their ID with the provided data
      parameters:
      - description: Updated Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated employee
          schema:
            $ref: '#/definitions/dtos.EmployeeResponse'
        "400":
          description: Invalid employee ID or request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing employee
      tags:
      - Employee
  /employee/{id}:
    get:
      description: Fetches an employee by their ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved employee
          schema:
            $ref: '#/definitions/dtos.EmployeeResponse'
        "400":
          description: Invalid employee ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Employee not found
          schema:
            additionalProperties: true
            type: object
      summary: Get employee by ID
      tags:
      - Employee
  /employee/GetByMajorID/{program_id}:
    get:
      description: Fetches all employees for a given program
      parameters:
      - description: Program ID
        in: path
        name: program_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved employees
          schema:
            items:
              $ref: '#/definitions/dtos.EmployeeResponse'
            type: array
        "400":
          description: Invalid program ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Employees not found
          schema:
            additionalProperties: true
            type: object
      summary: Get employees by program ID
      tags:
      - Employee
  /program:
    post:
      consumes:
      - application/json
      description: Create a new program
      parameters:
      - description: Program object
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateMajorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created program
          schema:
            $ref: '#/definitions/models.Program'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create program
      tags:
      - Program
  /program/GetAllMajor:
    get:
      description: Fetches all program
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched program
          schema:
            items:
              $ref: '#/definitions/models.Program'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all program
      tags:
      - Program
  /program/UpdateMajorName:
    put:
      consumes:
      - application/json
      description: Update the name of a program
      parameters:
      - description: Program object containing ID and name
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/models.Program'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated program name
          schema:
            $ref: '#/definitions/models.Program'
        "400":
          description: Invalid request body or parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update program name
      tags:
      - Program
  /projectConfig:
    post:
      consumes:
      - application/json
      description: Update all project config if ID is provided, otherwise insert new
        project config
      parameters:
      - description: Configurations
        in: body
        name: configs
        required: true
        schema:
          items:
            $ref: '#/definitions/dtos.ProjectConfigUpsertRequest'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated config
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid program ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Program not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Upsert project config
      tags:
      - ProjectConfig
  /projectConfig/GetByMajorId/{program_id}:
    get:
      description: Fetches all config for a given program
      parameters:
      - description: Program ID
        in: path
        name: program_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched config
          schema:
            items:
              $ref: '#/definitions/dtos.ProjectConfigResponse'
            type: array
        "400":
          description: Invalid program ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Program not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get config by program ID
      tags:
      - ProjectConfig
  /projectResource/{id}:
    delete:
      description: Delete a resource and its file
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseMessage'
      summary: Delete a resource
      tags:
      - Resource
  /projects:
    post:
      consumes:
      - application/json
      description: Creates a new project with the provided data
      parameters:
      - description: Project Data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created project
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new project
      tags:
      - Project
  /projects/{id}:
    delete:
      description: Deletes the specified project using its ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid project ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a project by ID
      tags:
      - Project
    get:
      description: Fetches a project by its unique ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved project
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid project ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a project by ID
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Updates a project by its ID with the provided data
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Project Data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated project
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid project ID or request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing project
      tags:
      - Project
  /projects/advisor/{advisor_id}:
    get:
      description: Fetches a project by its advisor ID
      parameters:
      - description: Advisor ID
        in: path
        name: advisor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved project
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "400":
          description: Invalid advisor ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a project by Advisor ID
      tags:
      - Project
  /projects/student/{student_id}:
    get:
      description: Fetches a project by its student ID
      parameters:
      - description: Student ID
        in: path
        name: student_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved project
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "400":
          description: Invalid student ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a project by Student ID
      tags:
      - Project
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
